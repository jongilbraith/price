Price
=====

A simple wrapper around Tobias LÃ¼tke's Money gem for handling prices - i.e. money values along with taxes.

- replace....

You can find the original Money at http://dist.leetsoft.com/api/money, and a nicely enhanced fork by collectiveidea at
http://github.com/collectiveidea/money/tree.

Usage
=====

>> Price.tax_rate = 175  # Set the tax rate to 17.5%
=> 175
>> p = Price.new(100, "GBP", true, false)
=> #<Price:0x3b19cf4 @money=#<Money:0x3b065c8 @currency="GBP", @cents=100>, @currency="GBP", @tax=#<Money:0x3b06514 @currency="GBP", @cents=18>>
>> p.tax
=> #<Money:0x3b06514 @currency="GBP", @cents=18>
>> p.without_tax
=> #<Money:0x3b065c8 @currency="GBP", @cents=100>
>> p.with_tax
=> #<Money:0x3af7550 @currency="GBP", @cents=118>
>> q = Price.new(118, "GBP", true, true)
=> #<Price:0x3adb300 @money=#<Money:0x3adb224 @currency="GBP", @cents=100>, @currency="GBP", @tax=#<Money:0x3adb120 @currency="GBP", @cents=18>>
>> q.tax
=> #<Money:0x4114eb0 @currency="GBP", @cents=18>
>> q.without_tax
=> #<Money:0x4115400 @currency="GBP", @cents=100>
>> q.with_tax
=> #<Money:0x40fbd20 @currency="GBP", @cents=118>


# First set the tax rate (defaults to 15, as for the UK)
>> Price.tax_rate = 175
=> 175

# Example of a price for a taxable item, initialised with a value including tax
>> p = Price.new(100, "GBP", true, false)
=> #<Price:0x7050134 @taxable=true, @currency="GBP", @money=#<Money:0x705010c @currency="GBP", @precision=2, @cents=100>>
>> p.tax
=> #<Money:0x704bf94 @currency="GBP", @precision=2, @cents=18>
>> p.without_tax
=> #<Money:0x705010c @currency="GBP", @precision=2, @cents=100>
>> p.with_tax
=> #<Money:0x7044e88 @currency="GBP", @precision=2, @cents=118>

# Example of a price for a taxable item, initialised with a value excluding tax
>> q = Price.new(118, "GBP", true, true)
=> #<Price:0x7036e64 @taxable=true, @currency="GBP", @money=#<Money:0x7036dec @currency="GBP", @precision=2, @cents=100>>
>> q.tax
=> #<Money:0x7032d8c @currency="GBP", @precision=2, @cents=18>
>> q.without_tax
=> #<Money:0x7036dec @currency="GBP", @precision=2, @cents=100>
>> q.with_tax
=> #<Money:0x702b028 @currency="GBP", @precision=2, @cents=118>

# Example of attempting to create a price for a non taxable item, with a value inclusive of tax
>> r = Price.new(118, "GBP", false, true)
RuntimeError: If something isn't taxable, you shouldn't be passing a tax inclusive price to it!
	from /Users/jon/Dev/completelynovel/work/vendor/plugins/price/lib/price.rb:18:in `initialize'
	from (irb):10:in `new'
	from (irb):10

# Example of a price for a non taxable item, correctly initialised with a value excluding tax
>> r = Price.new(100, "GBP", false, false)
=> #<Price:0x700f058 @taxable=false, @currency="GBP", @money=#<Money:0x700f030 @currency="GBP", @precision=2, @cents=100>>
>> r.tax
=> #<Money:0x7005008 @currency="GBP", @precision=2, @cents=0>
>> r.without_tax
=> #<Money:0x700f030 @currency="GBP", @precision=2, @cents=100>
>> r.with_tax
=> #<Money:0x6ffdc54 @currency="GBP", @precision=2, @cents=100>

Look into the composed_of ActiveRecord method to better integrate this into your models.

Future
======
I suppose I should knock together some tests.

Copyright (c) 2008 Jon Gilbraith, released under the MIT license
