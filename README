Price
=====

A simple wrapper around Tobias LÃ¼tke's Money gem for handling prices - i.e. money values along with taxes.

You can find Money at http://dist.leetsoft.com/api/money

Usage
=====

Basic price handling

Price.tax_rate = 175  # Set the tax rate to 17.5%
>> p = Price.new(100, "GBP", false)
=> #<Price:0x3b19cf4 @money=#<Money:0x3b065c8 @currency="GBP", @cents=100>, @currency="GBP", @tax=#<Money:0x3b06514 @currency="GBP", @cents=18>>
>> p.tax
=> #<Money:0x3b06514 @currency="GBP", @cents=18>
>> p.without_tax
=> #<Money:0x3b065c8 @currency="GBP", @cents=100>
>> p.with_tax
=> #<Money:0x3af7550 @currency="GBP", @cents=118>
>> q = Price.new(118, "GBP", true)
=> #<Price:0x3adb300 @money=#<Money:0x3adb224 @currency="GBP", @cents=100>, @currency="GBP", @tax=#<Money:0x3adb120 @currency="GBP", @cents=18>>
>> q.tax
=> #<Money:0x4114eb0 @currency="GBP", @cents=18>
>> q.without_tax
=> #<Money:0x4115400 @currency="GBP", @cents=100>
>> q.with_tax
=> #<Money:0x40fbd20 @currency="GBP", @cents=118>

Aritmetic:

>> p * 2
=> #<Price:0x3af40f8 @money=#<Money:0x3af4094 @currency="GBP", @cents=200>, @currency="GBP", @tax=#<Money:0x3af3fe0 @currency="GBP", @cents=35>>
>> p / 2
=> #<Price:0x3ae78a8 @money=#<Money:0x3ae7844 @currency="GBP", @cents=50>, @currency="GBP", @tax=#<Money:0x3ae7790 @currency="GBP", @cents=9>>
>> p + q
=> #<Price:0x3ad79f8 @money=#<Money:0x3ad7994 @currency="GBP", @cents=200>, @currency="GBP", @tax=#<Money:0x3ad78e0 @currency="GBP", @cents=35>>
>> p - q
=> #<Price:0x3af6754 @money=#<Money:0x3af66f0 @currency="GBP", @cents=0>, @currency="GBP", @tax=#<Money:0x3af663c @currency="GBP", @cents=0>>
>> (p + q).money
=> #<Money:0x3acfe38 @currency="GBP", @cents=200>
>> (p + q).tax
=> #<Money:0x3acad70 @currency="GBP", @cents=35>
>> (p + q).without_tax
=> #<Money:0x3ac5514 @currency="GBP", @cents=200>
>> (p + q).with_tax
=> #<Money:0x3abe6b0 @currency="GBP", @cents=235>


Comparison:

>> p == q
=> true
>> r = Price.new(200, "GBP", false)
=> #<Price:0x40942b0 @money=#<Money:0x4094210 @currency="GBP", @cents=200>, @currency="GBP", @tax=#<Money:0x4094148 @currency="GBP", @cents=30>>
>> p < r
=> true
>> r > p
=> true
>> r < p
=> false

Look into the composed_of ActiveRecord method to better integrate this into your models.

Future
======
Not actually used this yet, so if I find any bugs I'll fix them, and when I get some time I'll add
cattr_accessor to the plugin so it's not dependent on ActiveRecord and I can move it to a general purpose gem.

If needs be I'll also probably move the tax rate into the Price class at some point and add some more handling functionality.

I suppose I should knock together some tests too.

Copyright (c) 2008 Jon Gilbraith, released under the MIT license
